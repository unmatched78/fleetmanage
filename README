---

# Trunk Project README

Hello and welcome to the Trunk Project! This guide provides a step-by-step process for installing, configuring, and running the project on your PC. Follow these instructions carefully.

---
## Notes

- **Prerequisites:** Ensure Git and Python are installed on your PC.
- **Operating System:** The instructions above are for Windows. For macOS/Linux, modify the virtual environment activation command as follows:
  - macOS/Linux: `source venv/bin/activate`
- **Further Assistance:** let me know how I can be of any help.

## 1. Clone the Project Repository

Open your terminal (or command prompt) and run the following command to clone the repository:

```bash
git clone <project-url>
```

Replace `<project-url>` with the actual URL of the repository. Press **Enter** to download all the project files to your computer.

---

## 2. Set Up the Virtual Environment

A virtual environment ensures that your project uses the correct Python version and dependencies.

### a. Create the Virtual Environment

On Windows, open your terminal in the project's parent directory and run:

```bash
py -m venv venv
```

This command creates a virtual environment named `venv` in your current directory.

### b. Activate the Virtual Environment

After creating the virtual environment, activate it with the following command:

```bash
venv\Scripts\activate
```

When activated, your terminal prompt will indicate that you are now working inside the `venv` environment.

---

## 3. Install Required Dependencies

Navigate to the cloned project directory. You will find a file named `requirements.txt` which lists all the required Python packages. Install them by running:

```bash
pip install -r requirements.txt
```

This command installs all the dependencies needed for the project.

---

## 4. Run the Project

Before starting the development server, you must prepare the database. Follow these steps:

### a. Make Migrations

Prepare any changes to the database schema by running:

```bash
py manage.py makemigrations
```

### b. Migrate

Apply the migrations to your database (using SQLite, which is built into Django):

```bash
py manage.py migrate
```

### c. Start the Development Server

Launch the Django server with:

```bash
py manage.py runserver
```

By default, the server runs on `localhost:8000`.

---

## 5. (Optional) Expose Your Project Online with Ngrok

If you want to test your project from a remote device or share it online, you can use [Ngrok](https://ngrok.com/). Ngrok creates a secure tunnel to your local server.

### How to Use Ngrok:

1. **Run the Server on a Specific Port:**

   For local testing with Ngrok, run the server on port 8000:

   ```bash
   py manage.py runserver localhost:8000
   ```

2. **Set Up Ngrok:**

   - **Sign Up:** Create an account on Ngrok.
   - **Create a Tunnel:** Follow Ngrok's instructions to connect to your computer.
   - **Expose Your Port:** Open another terminal and run the command (replace `3000` if needed):

     ```bash
     ngrok http 8000
     ```

Ngrok will generate a public URL that forwards traffic to your local server.

---

## 6. Testing Endpoints

The project's URL routing is defined in two main files: one in the trunk folder and one in the core app.

### Main `urls.py` (Trunk Folder)

This file sets up the basic routes, including the admin panel and API endpoints:

```python
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path("admin/", admin.site.urls),
    path('api/', include('core.urls')),
]

# Serve static files and media
urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)
urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
```

### Core App `urls.py`

This file configures the endpoints for authentication and various models:

```python
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from .views import *

router = DefaultRouter()
router.register(r'drivers', DriverViewSet, basename='driver')
router.register(r'clients', ClientViewSet, basename='client')
router.register(r'cars', CarViewSet, basename='car')
router.register(r'jobposts', JobPostViewSet, basename='jobpost')
router.register(r'joboffers', JobOfferViewSet, basename='joboffer')
router.register(r'jobbids', JobBidViewSet, basename='jobbids')
router.register(r'payments', PaymentViewSet, basename='payment')
router.register(r'ratings', RatingViewSet, basename='rating')
router.register(r'chats', ClientDriverChatViewSet, basename='clientdriverchat')
router.register(r'cardocs', CarDocViewSet, basename='cardoc')
router.register(r'notifications', NotificationViewSet, basename='notification')
router.register(r'trips', TripViewSet, basename='trip')

urlpatterns = [
    # Authentication endpoints
    path('auth/signup/', SignupView.as_view(), name='signup'),
    path('auth/login/', LoginView.as_view(), name='login'),
    path('auth/logout/', LogoutView.as_view(), name='logout'),
    path('auth/user/', UserInfoView.as_view(), name='user-info'),
    # Public endpoint for pending job posts
    path('public/jobposts/', PublicJobPostListView.as_view(), name='public-jobposts'),
    # Model endpoints
    path('', include(router.urls)),
]
```

These settings allow you to access various parts of the application, including user authentication and different model endpoints such as drivers, clients, cars, job posts, and more.
start testing endpoints locally , for example go to :
@http://127.0.0.1:8000/api/auth/login/, then enter[in the interfce you see in content.]:
{
  "username": "testuser",
  "password": "123"
}
 then click post.
---

## Final Notes

- **Prerequisites:** Ensure Git and Python are installed on your PC.
- **Operating System:** The instructions above are for Windows. For macOS/Linux, modify the virtual environment activation command as follows:
  - macOS/Linux: `source venv/bin/activate`
- **Further Assistance:** let me know how I can be of any help.
N.B: if you want to see what is happening under the hood,
     navigate to http://127.0.0.1:8000/admin/ or {localhost you are using}/admin/
     the login as an admin with this credentials
     username: chris
     password: 123
Happy coding and enjoy using the Trunk Project!

---